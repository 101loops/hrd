package hrd

import (
	"time"
)

type Saver struct {
	coll *Collection
	opts *operationOpts
}

func newSaver(coll *Collection) *Saver {
	return &Saver{coll, coll.opts.clone()}
}

func (s *Saver) Flags(flags ...Flag) *Saver {
	s.opts = s.opts.Flags(flags...)
	return s
}

func (s *Saver) WithKey(complete ...bool) *Saver {
	s.opts = s.opts.CompleteKeys(complete...)
	return s
}

// ==== CACHE

func (s *Saver) NoCache() *Saver {
	return s.NoLocalCache().NoGlobalCache()
}

func (s *Saver) NoLocalCache() *Saver {
	s.opts = s.opts.NoLocalCache()
	return s
}

func (s *Saver) NoGlobalCache() *Saver {
	return s.CacheExpire(-1)
}

func (s *Saver) CacheExpire(exp time.Duration) *Saver {
	s.opts = s.opts.CacheExpire(exp)
	return s
}

// ==== EXECUTE

// Entity saves the passed entity into the datastore.
// If its key is incomplete, the returned key will be a unique key generated by the datastore.
func (s *Saver) Entity(src interface{}) (*Key, error) {
	keys, err := s.put(src)
	if len(keys) == 1 {
		return keys[0], err
	}
	return nil, err
}

// Entities is a batch version of Entity.
func (s *Saver) Entities(srcs interface{}) ([]*Key, error) {
	return s.put(srcs)
}

func (s *Saver) put(src interface{}) ([]*Key, error) {
	docs, err := newReadableDocs(s.coll, src)
	if err != nil {
		return nil, err
	}
	return s.coll.store.putMulti(s.coll.name, docs, s.opts)
}
